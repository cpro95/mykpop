datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique
  role  String @default("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Artist {
  id           String @id @default(cuid())
  name         String
  nameKor      String
  artistLogo   String?
  artistPoster String
  company      String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  videos      Video[]
  youtubeInfo YoutubeInfo[]
}

model Video {
  id        String @id @default(cuid())
  title     String
  role      String @default("mv")
  youtubeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artist      Artist        @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId    String
  youtubeInfo YoutubeInfo[]
}

model YoutubeInfo {
  id                  String   @id @default(cuid())
  youtubeId           String
  youtubeTitle        String
  youtubeDescription  String
  youtubePublishedAt  DateTime
  youtubeThumbnail    String
  youtubeViewCount    Int
  youtubeLikeCount    Int
  youtubeCommentCount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video    Video  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId  String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId String
}
